using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DelegatesAndEventsAssignments
{
    /// <summary>
    /// This class starts the execution of solution to the delegates and events questions.
    /// The method StartDelegateExercise1() starts the execution of the solution to question 1
    /// The method StartDelegateExercise2() starts the execution of the solution to question 2
    /// The method StartEventExercise() starts the execution of the solution to the event question
    /// </summary>
    public static class Execute
    {
        /// <summary>
        /// Starts the execution of the solution to question 1.
        /// </summary>
        public static void StartDelegateExercise1()
        {
            // A delegate that returns boolean values.
            // It checks if the username given by a user is the same as that likely to be used.
            // The username likely to be used is generated by the LikelyUserName() method
            Users.DUserCount dUserCount = delegate (Users x) 
            {
                if (x.UserName == x.LikelyUserName()) { return true; }
                else { return false; }
            };
            Users user1 = new Users { FirstName = "Moses", LastName = "Obaro", UserName = "Moses.Obaro" }; // An instance of the class "Users"
            Users user2 = new Users { FirstName = "Emisho", LastName = "Obaro", UserName = "EmishoObaro" }; // Another instance of the class "Users"

            Console.WriteLine($"The username {user1.UserName} is {dUserCount(user1)}");
            Console.WriteLine($"The username {user2.UserName} is {dUserCount(user2)}");
        }
        /// <summary>
        /// Starts the execution of the solution to question 2.
        /// </summary>
        public static void StartDelegateExercise2()
        {
            DelegateQuestion2.DivideByHundred();
        }

        /// <summary>
        /// Starts the execution of the solution to the events exercise
        /// </summary>
        public static void StartEventExercise()
        {
            EventSubscribers.CountInThousands();
        }
    }

 
}
